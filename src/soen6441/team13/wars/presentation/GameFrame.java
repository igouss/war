package soen6441.team13.wars.presentation;

import java.io.File;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import soen6441.team13.wars.controller.EditorViewController;
import soen6441.team13.wars.controller.SimulationController;
import soen6441.team13.wars.domain.Continent;
import soen6441.team13.wars.domain.Player;
import soen6441.team13.wars.domain.State;
import soen6441.team13.wars.logger.ActionLogger;
import soen6441.team13.wars.logger.ActionLoggerFactory;
import soen6441.team13.wars.presentation.gameWorld.GameWorldView;
import edu.uci.ics.jung.visualization.control.ModalGraphMouse.Mode;

/**
 * Main game window. 
 */
public class GameFrame extends javax.swing.JFrame implements EditorView {

	private EditorViewController worldEditorController;
	private SimulationController simulationController;
	private GameWorldView gameWorldView;

	/** Creates new form GameFrame */
	public GameFrame() {
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbContinentNames = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cbPlayerNames = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        txtStateName = new javax.swing.JTextField();
        cboxIsCity = new javax.swing.JCheckBox();
        cboxHasIronMine = new javax.swing.JCheckBox();
        cboxHasBarracks = new javax.swing.JCheckBox();
        cboxHasStables = new javax.swing.JCheckBox();
        cboxHasArtileryFactory = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        lblInfantry = new javax.swing.JLabel();
        lblCavalery = new javax.swing.JLabel();
        lblArtilery = new javax.swing.JLabel();
        txtInfantry = new javax.swing.JTextField();
        txtCavalery = new javax.swing.JTextField();
        txtArtilery = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        lblAddContinent = new javax.swing.JLabel();
        lblAddPlayer = new javax.swing.JLabel();
        btnUpdateState = new javax.swing.JButton();
        btnStartSimulation = new javax.swing.JButton();
        btnPause = new javax.swing.JButton();
        btnStep = new javax.swing.JButton();
        inspectorPanel = new soen6441.team13.wars.presentation.InspectorPanel();
        lblDescription = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        btnEditGraph = new javax.swing.JButton();
        btnChangeGraph = new javax.swing.JButton();
        btnAssignContinent = new javax.swing.JButton();
        gameWorldView = new GameWorldView();
        graphPanel = gameWorldView.getPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logPanel1 = new soen6441.team13.wars.presentation.LogPanel();
        jMenuBar = new javax.swing.JMenuBar();
        jFileMenu = new javax.swing.JMenu();
        menuLoadGame = new javax.swing.JMenuItem();
        menuSameGame = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WARS");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Continent");

        jLabel2.setText("Player");

        jLabel3.setText("State name");

        cboxIsCity.setText("Is city");
        cboxIsCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxIsCityActionPerformed(evt);
            }
        });

        cboxHasIronMine.setText("Has iron mine");
        cboxHasIronMine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxHasIronMineActionPerformed(evt);
            }
        });

        cboxHasBarracks.setText("Has barracks");
        cboxHasBarracks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxHasBarracksActionPerformed(evt);
            }
        });

        cboxHasStables.setText("Has Stables");
        cboxHasStables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxHasStablesActionPerformed(evt);
            }
        });

        cboxHasArtileryFactory.setText("Has artilery factory");
        cboxHasArtileryFactory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxHasArtileryFactoryActionPerformed(evt);
            }
        });

        lblInfantry.setText("Infantry");

        lblCavalery.setText("Cavalery");

        lblArtilery.setText("Artilery");

        lblAddContinent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.png"))); // NOI18N
        lblAddContinent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAddContinentMouseClicked(evt);
            }
        });

        lblAddPlayer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.png"))); // NOI18N
        lblAddPlayer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAddPlayerMouseClicked(evt);
            }
        });

        btnUpdateState.setText("Update state");
        btnUpdateState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateStateActionPerformed(evt);
            }
        });

        btnStartSimulation.setText("Start Simulation");
        btnStartSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartSimulationActionPerformed(evt);
            }
        });

        btnPause.setText("Pause");
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });

        btnStep.setText("Step");
        btnStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStepActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cbPlayerNames, 0, 315, Short.MAX_VALUE)
                    .addComponent(cbContinentNames, 0, 315, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblAddContinent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblAddPlayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtStateName, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE))
                    .addComponent(cboxIsCity)
                    .addComponent(cboxHasIronMine)
                    .addComponent(cboxHasBarracks)
                    .addComponent(cboxHasStables)
                    .addComponent(cboxHasArtileryFactory))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblInfantry)
                    .addComponent(lblCavalery)
                    .addComponent(lblArtilery))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtInfantry, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                    .addComponent(txtCavalery, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                    .addComponent(txtArtilery, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(btnUpdateState)
                .addContainerGap(275, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnStartSimulation, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(btnStep)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPause)))
                        .addGap(119, 119, 119)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblAddContinent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbContinentNames)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblAddPlayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbPlayerNames)
                        .addComponent(jLabel2)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtStateName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cboxIsCity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboxHasIronMine)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cboxHasBarracks)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboxHasStables)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cboxHasArtileryFactory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInfantry)
                    .addComponent(txtInfantry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCavalery)
                    .addComponent(txtCavalery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblArtilery)
                    .addComponent(txtArtilery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(btnUpdateState)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnStartSimulation)
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStep)
                    .addComponent(btnPause))
                .addContainerGap())
        );

        inspectorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout inspectorPanelLayout = new javax.swing.GroupLayout(inspectorPanel);
        inspectorPanel.setLayout(inspectorPanelLayout);
        inspectorPanelLayout.setHorizontalGroup(
            inspectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inspectorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDescription)
                .addContainerGap(402, Short.MAX_VALUE))
        );
        inspectorPanelLayout.setVerticalGroup(
            inspectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inspectorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDescription)
                .addContainerGap(282, Short.MAX_VALUE))
        );

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnEditGraph.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edit.png"))); // NOI18N
        btnEditGraph.setText("Edit Graph");
        btnEditGraph.setFocusable(false);
        btnEditGraph.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditGraphActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEditGraph);

        btnChangeGraph.setIcon(new javax.swing.ImageIcon(getClass().getResource("/change.png"))); // NOI18N
        btnChangeGraph.setText("Change Graph");
        btnChangeGraph.setFocusable(false);
        btnChangeGraph.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnChangeGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeGraphActionPerformed(evt);
            }
        });
        jToolBar1.add(btnChangeGraph);

        btnAssignContinent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/globe.png"))); // NOI18N
        btnAssignContinent.setText("Assign Continent");
        btnAssignContinent.setFocusable(false);
        btnAssignContinent.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAssignContinent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignContinentActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAssignContinent);

        graphPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 790, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(logPanel1);

        jFileMenu.setText("File");

        menuLoadGame.setText("Load...");
        menuLoadGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLoadGameActionPerformed(evt);
            }
        });
        jFileMenu.add(menuLoadGame);

        menuSameGame.setText("Save...");
        menuSameGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSameGameActionPerformed(evt);
            }
        });
        jFileMenu.add(menuSameGame);

        menuExit.setText("Exit");
        jFileMenu.add(menuExit);

        jMenuBar.add(jFileMenu);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1226, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 794, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inspectorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inspectorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void btnUpdateStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateStateActionPerformed
		worldEditorController.currentStateChanged();
	}//GEN-LAST:event_btnUpdateStateActionPerformed

	private void btnStartSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartSimulationActionPerformed
		worldEditorController.getGameWorld().setDoBattle(true);
		if (!simulationController.isStarted()) {
			simulationController.start(worldEditorController.getGameWorld());
		}
		simulationController.startSimulation();
	}//GEN-LAST:event_btnStartSimulationActionPerformed

	private void lblAddContinentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddContinentMouseClicked
		worldEditorController.createNewContinent();
	}//GEN-LAST:event_lblAddContinentMouseClicked

	private void lblAddPlayerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddPlayerMouseClicked
		worldEditorController.createNewPlayer();
	}//GEN-LAST:event_lblAddPlayerMouseClicked

	private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
		if (simulationController.isStarted()) {
			simulationController.pause();
		}
	}//GEN-LAST:event_btnPauseActionPerformed

	private void btnStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStepActionPerformed
		worldEditorController.getGameWorld().setDoBattle(true);
		if (!simulationController.isStarted()) {
			simulationController.start(worldEditorController.getGameWorld());
		}
		simulationController.nextTurn();
	}//GEN-LAST:event_btnStepActionPerformed

	private void menuLoadGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLoadGameActionPerformed
		worldEditorController.loadGame();
	}//GEN-LAST:event_menuLoadGameActionPerformed

	private void menuSameGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSameGameActionPerformed
		worldEditorController.saveGame();
	}//GEN-LAST:event_menuSameGameActionPerformed

	private void btnEditGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditGraphActionPerformed
		worldEditorController.graphSelectionChanged(Mode.EDITING);
	}//GEN-LAST:event_btnEditGraphActionPerformed

	private void btnChangeGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeGraphActionPerformed
		worldEditorController.graphSelectionChanged(Mode.PICKING);
	}//GEN-LAST:event_btnChangeGraphActionPerformed

	private void btnAssignContinentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignContinentActionPerformed
		worldEditorController.graphSelectionChanged(Mode.ANNOTATING);
	}//GEN-LAST:event_btnAssignContinentActionPerformed

        private void cboxIsCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxIsCityActionPerformed
            worldEditorController.currentStateChanged();
        }//GEN-LAST:event_cboxIsCityActionPerformed

        private void cboxHasIronMineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxHasIronMineActionPerformed
            worldEditorController.currentStateChanged();
        }//GEN-LAST:event_cboxHasIronMineActionPerformed

        private void cboxHasBarracksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxHasBarracksActionPerformed
            worldEditorController.currentStateChanged();
        }//GEN-LAST:event_cboxHasBarracksActionPerformed

        private void cboxHasStablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxHasStablesActionPerformed
            worldEditorController.currentStateChanged();
        }//GEN-LAST:event_cboxHasStablesActionPerformed

        private void cboxHasArtileryFactoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxHasArtileryFactoryActionPerformed
            worldEditorController.currentStateChanged();
        }//GEN-LAST:event_cboxHasArtileryFactoryActionPerformed

	/**
	* @param args the command line arguments
	*/
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new GameFrame().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignContinent;
    private javax.swing.JButton btnChangeGraph;
    private javax.swing.JButton btnEditGraph;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnStartSimulation;
    private javax.swing.JButton btnStep;
    private javax.swing.JButton btnUpdateState;
    private javax.swing.JComboBox cbContinentNames;
    private javax.swing.JComboBox cbPlayerNames;
    private javax.swing.JCheckBox cboxHasArtileryFactory;
    private javax.swing.JCheckBox cboxHasBarracks;
    private javax.swing.JCheckBox cboxHasIronMine;
    private javax.swing.JCheckBox cboxHasStables;
    private javax.swing.JCheckBox cboxIsCity;
    private javax.swing.JPanel graphPanel;
    private soen6441.team13.wars.presentation.InspectorPanel inspectorPanel;
    private javax.swing.JMenu jFileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblAddContinent;
    private javax.swing.JLabel lblAddPlayer;
    private javax.swing.JLabel lblArtilery;
    private javax.swing.JLabel lblCavalery;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblInfantry;
    private soen6441.team13.wars.presentation.LogPanel logPanel1;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenuItem menuLoadGame;
    private javax.swing.JMenuItem menuSameGame;
    private javax.swing.JTextField txtArtilery;
    private javax.swing.JTextField txtCavalery;
    private javax.swing.JTextField txtInfantry;
    private javax.swing.JTextField txtStateName;
    // End of variables declaration//GEN-END:variables

	@Override
	public void addContinent(Continent continent) {
		cbContinentNames.addItem(continent);
	}

	@Override
	public void addPlayer(Player newPlayer) {
		cbPlayerNames.addItem(newPlayer);
		cbPlayerNames.setSelectedItem(newPlayer);
	}

	@Override
	public void clearContinents() {
		((DefaultComboBoxModel) cbContinentNames.getModel()).removeAllElements();
	}

	@Override
	public void clearPlayerList() {
		((DefaultComboBoxModel) cbPlayerNames.getModel()).removeAllElements();
	}

	@Override
	public String getContinentName() {
		return JOptionPane.showInputDialog(this,
				"Please specify the name for this continent", "Enter new continent",
				JOptionPane.QUESTION_MESSAGE);
	}

	@Override
	public String getNewPlayerName() {
		return JOptionPane.showInputDialog(this,
				"Please specify the name for this player", "Enter New Player",
				JOptionPane.QUESTION_MESSAGE);
	}

	@Override
	public int getNumberOfArtillery() {
		return Integer.valueOf(txtArtilery.getText());
	}

	@Override
	public int getNumberOfCavalry() {
		return Integer.valueOf(txtCavalery.getText());
	}

	@Override
	public int getNumberOfInfantry() {
		return Integer.valueOf(txtInfantry.getText());
	}

	@Override
	public File getSaveFile() {
		JFileChooser fc = new JFileChooser();
		int returnVal = fc.showSaveDialog(this);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			return fc.getSelectedFile();
		} else {
			return null;
		}
	}

	@Override
	public Continent getSelectedContinent() {
		return (Continent) cbContinentNames.getSelectedItem();
	}

	@Override
	public Player getSelectedPlayer() {
		return (Player) cbPlayerNames.getSelectedItem();
	}

	@Override
	public String getSelectedStateName() {
		return txtStateName.getText();
	}

	@Override
	public void hasArtilleryFactory(boolean hasArtilleryFactory) {
		cboxHasArtileryFactory.setSelected(hasArtilleryFactory);
	}

	@Override
	public boolean hasArtilleryFactorySelected() {
		return cboxHasArtileryFactory.isSelected();
	}

	@Override
	public void hasBarracks(boolean hasBarracks) {
		cboxHasBarracks.setSelected(hasBarracks);

	}

	@Override
	public boolean hasBracksSelected() {
		return cboxHasBarracks.isSelected();
	}

	@Override
	public void hasIron(boolean hasIronMine) {
		cboxHasIronMine.setSelected(hasIronMine);

	}

	@Override
	public boolean hasIronSelected() {
		return cboxHasIronMine.isSelected();
	}

	@Override
	public void hasStables(boolean hasStables) {
		cboxHasStables.setSelected(hasStables);

	}

	@Override
	public boolean hasStablesSelected() {
		return cboxHasStables.isSelected();
	}

	@Override
	public void init() {
		final ActionLogger actionLog = ActionLoggerFactory.getInstance();
		logPanel1.setActionLog(actionLog);

		gameWorldView.setController(worldEditorController);
		gameWorldView.init();
		gameWorldView.reset();
		pack();
	}

	@Override
	public void isCity(boolean city) {
		cboxIsCity.setSelected(city);

	}

	@Override
	public boolean isCitySelected() {
		return cboxIsCity.isSelected();
	}

	@Override
	public File openFile() {

		JFileChooser fc = new JFileChooser();

		int returnVal = fc.showOpenDialog(this);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			return fc.getSelectedFile();

		} else {
			return null;
		}
	}

	@Override
	public void selectContinent(Continent continent) {
		cbContinentNames.setSelectedItem(continent);
	}

	@Override
	public void selectPlayer(Player player) {
		cbPlayerNames.setSelectedItem(player);

	}

	@Override
	public void setDescription(State state) {
		String props = "";
		if (state.isCity()) {
			props += "<li>Is a city</li>";
		}
		if (state.hasBarracks()) {
			props += "<li>Has barracks</li>";
		}
		if (state.hasFoundry()) {
			props += "<li>Has artillery factory</li>";
		}
		if (state.hasStables()) {
			props += "<li>Has stables</li>";
		}
		if (state.hasIronMine()) {
			props += "<li>Has iron mine</li>";
		}
		if (state.getGarrison().getInfantry() > 0) {
			props += "<li>" + state.getGarrison().getInfantry()
					+ " infantries</li>";
		}
		if (state.getGarrison().getCavalry() > 0) {
			props += "<li>" + state.getGarrison().getCavalry()
					+ " cavalries</li>";
		}
		if (state.getGarrison().getArtillery() > 0) {
			props += "<li>" + state.getGarrison().getArtillery() + " artillery</li>";
		}

		if (null != state.getContinent()) {
			props += "<li> Is part of continent: " + state.getContinent() + " </li>";
		}

		String desc = "<html><b>&nbsp;" + state.getName()
				+ "</b><br/><ul><li>Owned by " + state.getPlayer().getName()
				+ "</li>" + props + "</ul></html>";

		lblDescription.setText(desc);

	}

	@Override
	public void setEditorController(EditorViewController gameEditorViewController) {
		this.worldEditorController = gameEditorViewController;

	}

	@Override
	public void setNumberOfArtillery(int artillery) {
		txtArtilery.setText(String.valueOf(artillery));

	}

	@Override
	public void setNumberOfCavalry(int cavalery) {
		txtCavalery.setText(String.valueOf(cavalery));

	}

	@Override
	public void setNumberOfInfantry(int infantry) {
		txtInfantry.setText(String.valueOf(infantry));

	}

	@Override
	public void setSimulationController(SimulationController simulationController) {
		this.simulationController = simulationController;

	}

	@Override
	public void setStateName(String name) {
		txtStateName.setText(name);
	}

	@Override
	public GameWorldView getGameWorldView() {
		return gameWorldView;
	}
}
